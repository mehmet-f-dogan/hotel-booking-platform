version: "3.9"

services:
  # ==============================
  # AUTH SERVICE
  # ==============================
  auth-service:
    build: ./auth-service
    container_name: auth-service
    image: hotel-platform/auth-service
    depends_on:
      user-service:
        condition: service_healthy
      discovery-service:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # USER SERVICE
  # ==============================
  user-service:
    build: ./user-service
    container_name: user-service
    image: hotel-platform/user-service
    depends_on:
      discovery-service:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # HOTEL SERVICE
  # ==============================
  hotel-service:
    build: ./hotel-service
    container_name: hotel-service
    image: hotel-platform/hotel-service
    depends_on:
      discovery-service:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # RESERVATION SERVICE
  # ==============================
  reservation-service:
    build: ./reservation-service
    container_name: reservation-service
    image: hotel-platform/reservation-service
    depends_on:
      discovery-service:
        condition: service_healthy
      hotel-service:
        condition: service_healthy
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # NOTIFICATION SERVICE
  # ==============================
  notification-service:
    build: ./notification-service
    container_name: notification-service
    image: hotel-platform/notification-service
    depends_on:
      discovery-service:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # API GATEWAY
  # ==============================
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    image: hotel-platform/api-gateway
    ports:
      - "8080:8080"
    depends_on:
      discovery-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
      user-service:
        condition: service_healthy
      hotel-service:
        condition: service_healthy
      reservation-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8080/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # EUREKA SERVICE DISCOVERY
  # ==============================
  discovery-service:
    build: ./discovery-service
    container_name: discovery-service
    ports:
      - "8761:8761"
    networks:
      - hotelnet
    healthcheck:
      test:
        ["CMD-SHELL", "curl -f http://localhost:8761/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # DATABASE
  # ==============================
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: hoteldb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    networks:
      - hotelnet
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 20
      start_period: 10s

  # ==============================
  # REDIS
  # ==============================
  redis:
    image: redis:7
    container_name: redis
    networks:
      - hotelnet
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 20

  # ==============================
  # KAFKA
  # ==============================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - hotelnet

  kafka:
    image: confluentinc/cp-kafka:7.4.1
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LOG_CLEANER_ENABLE: "true"
      KAFKA_LOG_CLEANER_MIN_COMPACTION_LAG_MS: 0
      KAFKA_LOG_RETENTION_MS: -1
      KAFKA_LOG_CLEANUP_POLICY: compact
    depends_on:
      - zookeeper
    networks:
      - hotelnet
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server=kafka:9092", "--list"]
      interval: 10s
      retries: 20

  # ==============================
  # NETWORK
  # ==============================
networks:
  hotelnet:
    driver: bridge
